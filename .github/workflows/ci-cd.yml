# GitHub Actions CI/CD Pipeline for NeuroGrid
name: NeuroGrid CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: neurogrid

jobs:
  # Lint and Security Checks
  lint-and-security:
    name: üîç Lint & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: coordinator-server/package-lock.json
        
    - name: Install dependencies
      working-directory: ./coordinator-server
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./coordinator-server
      run: npm run lint
      
    - name: Security audit
      working-directory: ./coordinator-server
      run: npm audit --audit-level=moderate
      
    - name: Check for vulnerabilities
      working-directory: ./coordinator-server
      run: npx audit-ci --moderate

  # Unit Tests
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: coordinator-server/package-lock.json
        
    - name: Install dependencies
      working-directory: ./coordinator-server
      run: npm ci
      
    - name: Run unit tests
      working-directory: ./coordinator-server
      run: npm run test:unit
      env:
        NODE_ENV: test
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: coordinator-server/coverage/

  # Integration Tests
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_neurogrid
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: coordinator-server/package-lock.json
        
    - name: Install dependencies
      working-directory: ./coordinator-server
      run: npm ci
      
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Run integration tests
      working-directory: ./coordinator-server
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_neurogrid
        REDIS_URL: redis://localhost:6379/1
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: coordinator-server/coverage/

  # End-to-End Tests
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_neurogrid
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: coordinator-server/package-lock.json
        
    - name: Install dependencies
      working-directory: ./coordinator-server
      run: npm ci
      
    - name: Wait for services
      run: |
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
    - name: Run E2E tests
      working-directory: ./coordinator-server
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_neurogrid
        REDIS_URL: redis://localhost:6379/1
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: coordinator-server/coverage/

  # Coverage Report
  coverage:
    name: üìä Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_neurogrid
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: coordinator-server/package-lock.json
        
    - name: Install dependencies
      working-directory: ./coordinator-server
      run: npm ci
      
    - name: Run all tests with coverage
      working-directory: ./coordinator-server
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_neurogrid
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coordinator-server/coverage/lcov.info
        directory: ./coordinator-server/coverage/
        flags: unittests
        name: neurogrid-coordinator
        fail_ci_if_error: false
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coordinator-server/coverage/

  # Build Docker Image
  build:
    name: üê≥ Build Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: neurogrid/coordinator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./coordinator-server
        file: ./coordinator-server/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'neurogrid/coordinator:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [coverage, build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        echo "Staging deployment would happen here"

  # Deploy to Production
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [coverage, build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üåü Deploying to production environment..."
        # Add your production deployment commands here
        echo "Production deployment would happen here"

  # Cleanup
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "üßπ Cleaning up temporary artifacts..."
        # Add cleanup commands if needed