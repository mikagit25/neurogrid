name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Coordinator Server Tests
  coordinator-tests:
    name: Coordinator Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: coordinator-server/package-lock.json
      
      - name: Install dependencies
        working-directory: ./coordinator-server
        run: npm ci
      
      - name: Run linting
        working-directory: ./coordinator-server
        run: npm run lint
      
      - name: Run tests
        working-directory: ./coordinator-server
        run: npm run test:ci
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          DB_URL: sqlite::memory:
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coordinator-server/coverage/lcov.info
          flags: coordinator
          name: coordinator-coverage

  # Web Interface Tests  
  web-interface-tests:
    name: Web Interface
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: web-interface/package-lock.json
      
      - name: Install dependencies
        working-directory: ./web-interface
        run: npm ci
      
      - name: Run linting
        working-directory: ./web-interface
        run: npm run lint
      
      - name: Run tests
        working-directory: ./web-interface
        run: npm run test:ci
      
      - name: Build application
        working-directory: ./web-interface
        run: npm run build

  # Node Client Tests
  node-client-tests:
    name: Node Client
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: node-client/requirements.txt
      
      - name: Install dependencies
        working-directory: ./node-client
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort mypy
      
      - name: Run linting
        working-directory: ./node-client
        run: |
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
          black --check src/
          isort --check-only src/
      
      - name: Run type checking
        working-directory: ./node-client
        run: mypy src/ --ignore-missing-imports
      
      - name: Run tests
        working-directory: ./node-client
        run: pytest tests/ --cov=src --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./node-client/coverage.xml
          flags: node-client
          name: node-client-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [coordinator-tests, web-interface-tests, node-client-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: neurogrid_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd coordinator-server && npm ci
          cd ../node-client && pip install -r requirements.txt
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/neurogrid_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

  # Docker Build Test
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build coordinator image
        uses: docker/build-push-action@v5
        with:
          context: ./coordinator-server
          push: false
          tags: neurogrid/coordinator:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build web interface image
        uses: docker/build-push-action@v5
        with:
          context: ./web-interface
          push: false
          tags: neurogrid/web-interface:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security, coordinator-tests, web-interface-tests, node-client-tests, integration-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          # Add your deployment script here
          # Example: deploy to your server, update containers, etc.

  # Dependency Review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate