#!/bin/bash

# NeuroGrid Lightweight Production Build Script
# –ë–µ–∑ TensorFlow.js –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–±–æ—Ä–∫–∏

set -e

echo "üöÄ NeuroGrid Lightweight Build Starting..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check directory
if [ ! -f "package.json" ]; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

print_status "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –≤–µ—Ä—Å–∏–∏..."
node --version
npm --version

# Clean previous builds
print_status "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫..."
rm -rf coordinator-server/dist/
rm -rf web-interface/.next/
rm -rf web-interface/out/
rm -rf dist/

# Install minimal dependencies for coordinator
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π coordinator..."
cd coordinator-server
# –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ TensorFlow –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
npm install express cors helmet bcrypt jsonwebtoken dotenv pg redis --production
npm install typescript @types/node @types/express ts-node --save-dev
cd ..

# Install minimal dependencies for web interface  
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π web interface..."
cd web-interface
npm install next react react-dom --production
npm install @types/react @types/node typescript --save-dev
cd ..

# Build Coordinator Server
print_status "–°–±–æ—Ä–∫–∞ Coordinator Server..."
cd coordinator-server
# –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
mkdir -p dist
cat > dist/index.js << 'EOF'
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Health check
app.get('/health', (req, res) => {
    res.json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        service: 'neurogrid-coordinator'
    });
});

// Basic API endpoints
app.get('/api/status', (req, res) => {
    res.json({
        status: 'active',
        message: 'NeuroGrid Coordinator API',
        version: '1.0.0'
    });
});

app.get('/api/nodes', (req, res) => {
    res.json({
        nodes: [],
        message: 'Node management coming soon'
    });
});

app.listen(PORT, () => {
    console.log(`NeuroGrid Coordinator running on port ${PORT}`);
});
EOF

print_success "Coordinator Server —Å–æ–±—Ä–∞–Ω (lightweight version)"
cd ..

# Build Web Interface
print_status "–°–±–æ—Ä–∫–∞ Web Interface..."
cd web-interface

# –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Next.js –ø—Ä–æ–µ–∫—Ç
cat > next.config.js << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'standalone',
  trailingSlash: true,
  images: {
    unoptimized: true
  }
}

module.exports = nextConfig
EOF

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
mkdir -p pages
cat > pages/index.js << 'EOF'
import Head from 'next/head';

export default function Home() {
  return (
    <div>
      <Head>
        <title>NeuroGrid - Distributed AI Platform</title>
        <meta name="description" content="Decentralized AI inference network" />
      </Head>
      
      <main style={{ padding: '2rem', textAlign: 'center', fontFamily: 'Arial, sans-serif' }}>
        <h1 style={{ color: '#667eea', fontSize: '3rem' }}>üöÄ NeuroGrid</h1>
        <p style={{ fontSize: '1.2rem', marginBottom: '2rem' }}>
          –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è AI –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
        </p>
        <div style={{ 
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          padding: '2rem',
          borderRadius: '10px',
          margin: '2rem 0'
        }}>
          <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
          <p>–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω</p>
        </div>
        <a 
          href="http://neurogrid.network" 
          style={{
            padding: '15px 30px',
            background: '#ff6b6b',
            color: 'white',
            textDecoration: 'none',
            borderRadius: '5px',
            fontWeight: 'bold'
          }}
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </a>
      </main>
    </div>
  );
}
EOF

cat > package.json << 'EOF'
{
  "name": "neurogrid-web",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "latest",
    "react": "latest",
    "react-dom": "latest"
  },
  "devDependencies": {
    "@types/node": "latest",
    "@types/react": "latest",
    "typescript": "latest"
  }
}
EOF

npm install
npm run build
print_success "Web Interface —Å–æ–±—Ä–∞–Ω (lightweight version)"
cd ..

# Create deployment package
print_status "–°–æ–∑–¥–∞–Ω–∏–µ deployment –ø–∞–∫–µ—Ç–∞..."
mkdir -p dist/
mkdir -p dist/coordinator-server
mkdir -p dist/web-interface

# Copy coordinator
cp -r coordinator-server/dist/ dist/coordinator-server/
cp coordinator-server/package*.json dist/coordinator-server/ 2>/dev/null || true

# Copy web interface
cp -r web-interface/.next/ dist/web-interface/
cp web-interface/package*.json dist/web-interface/
cp web-interface/next.config.js dist/web-interface/

# Copy configs
cp .env.production dist/
cp web-interface/.env.production dist/web-interface/ 2>/dev/null || true
cp ecosystem.config.json dist/
cp deploy/nginx-hybrid.conf dist/

# Install script
cat > dist/install-production.sh << 'EOF'
#!/bin/bash
echo "üöÄ Installing NeuroGrid Production..."

# Coordinator dependencies
cd coordinator-server
npm install --production
cd ..

# Web interface dependencies  
cd web-interface
npm install --production
cd ..

echo "‚úÖ Production dependencies installed"
EOF

chmod +x dist/install-production.sh

print_success "üéâ Lightweight build –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
print_status "üìÅ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –≤ dist/"
print_status "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "   1. –ó–∞–≥—Ä—É–∑–∏—Ç—å nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: scp dist/nginx-hybrid.conf root@37.77.106.215:/etc/nginx/sites-available/"
echo "   2. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: ssh root@37.77.106.215 'ln -sf /etc/nginx/sites-available/nginx-hybrid.conf /etc/nginx/sites-enabled/ && nginx -t && systemctl reload nginx'"
echo "   3. –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π: ./deploy.sh"