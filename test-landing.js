#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ª–µ–Ω–¥–∏–Ω–≥–∞ –∏ –±–µ—Ç–∞-–ø—Ä–æ–≥—Ä–∞–º–º—ã NeuroGrid
 */

const http = require('http');

const BASE_URL = 'http://localhost:3002';

function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      method,
      hostname: 'localhost',
      port: 3002,
      path,
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'NeuroGrid-Test/1.0'
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const result = {
            status: res.statusCode,
            headers: res.headers,
            body: res.headers['content-type']?.includes('json') ? JSON.parse(body) : body
          };
          resolve(result);
        } catch (e) {
          resolve({ status: res.statusCode, body, error: e.message });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NEUROGRID –õ–ï–ù–î–ò–ù–ì–ê\n');

  try {
    // 1. –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    const homepage = await makeRequest('GET', '/');
    if (homepage.status === 200 && homepage.body.includes('NeuroGrid')) {
      console.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
      console.log(`   üìÑ –†–∞–∑–º–µ—Ä: ${homepage.body.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`   üé® –°–æ–¥–µ—Ä–∂–∏—Ç: ${homepage.body.includes('Join Beta') ? '–ö–Ω–æ–ø–∫–∞ Beta' : '–ù–µ—Ç –∫–Ω–æ–ø–∫–∏ Beta'}`);
      console.log(`   üß™ –°–æ–¥–µ—Ä–∂–∏—Ç: ${homepage.body.includes('Try Demo') ? '–ö–Ω–æ–ø–∫–∞ Demo' : '–ù–µ—Ç –∫–Ω–æ–ø–∫–∏ Demo'}`);
    } else {
      console.log('‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // 2. –¢–µ—Å—Ç health check
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...');
    const health = await makeRequest('GET', '/health');
    if (health.status === 200 && health.body.status === 'OK') {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
      console.log(`   ‚è±Ô∏è  Uptime: ${health.body.uptime_human}`);
      console.log(`   üß† Memory: ${health.body.memory.used}`);
      console.log(`   üåê Nodes: ${health.body.network.nodes_online}`);
      console.log(`   üìß Beta signups: ${health.body.network.beta_signups}`);
    } else {
      console.log('‚ùå Health check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // 3. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–µ—Ç–∞
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–µ—Ç–∞...');
    const testEmail = `test_${Date.now()}@neurogrid.test`;
    const signup = await makeRequest('POST', '/api/beta/signup', {
      email: testEmail,
      type: 'developer',
      source: 'test'
    });
    
    if (signup.status === 200 && signup.body.success) {
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–µ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üìß Email: ${testEmail}`);
      console.log(`   üéÅ –ë–æ–Ω—É—Å—ã: ${signup.body.bonuses.free_tasks} free tasks`);
      console.log(`   üí∞ –°–∫–∏–¥–∫–∞: ${signup.body.bonuses.lifetime_discount}%`);
      console.log(`   üÜî ID: ${signup.body.signup_id}`);
    } else {
      console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–µ—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üìÑ Response: ${JSON.stringify(signup.body)}`);
    }

    // 4. –¢–µ—Å—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞ email
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    const duplicate = await makeRequest('POST', '/api/beta/signup', {
      email: testEmail,
      type: 'researcher'
    });
    
    if (duplicate.status === 200 && duplicate.body.status === 'existing') {
      console.log('‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ö†Ô∏è  –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    }

    // 5. –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ email
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é email...');
    const invalid = await makeRequest('POST', '/api/beta/signup', {
      email: 'invalid-email',
      type: 'developer'
    });
    
    if (invalid.status === 400) {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // 6. –¢–µ—Å—Ç AI demo
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI demo...');
    const task = await makeRequest('POST', '/api/tasks', {
      prompt: 'Test prompt for NeuroGrid demo'
    });
    
    if (task.status === 200 && task.body.success) {
      console.log('‚úÖ AI demo —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üÜî Task ID: ${task.body.task_id}`);
      console.log(`   ‚è±Ô∏è  Estimated time: ${task.body.estimated_time}`);
      console.log(`   üí∞ Cost: ${task.body.cost.estimated}`);
      console.log(`   üåç Node: ${task.body.node.location}`);
      console.log(`   üíæ GPU: ${task.body.node.gpu}`);
    } else {
      console.log('‚ùå AI demo –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // 7. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞
    console.log('\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const stats = await makeRequest('GET', '/api/demo/stats');
    if (stats.status === 200) {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üåê Active nodes: ${stats.body.network.active_nodes}`);
      console.log(`   üìä Tasks processed: ${stats.body.network.total_tasks_processed}`);
      console.log(`   üí∞ Cost savings: ${stats.body.network.cost_savings}`);
      console.log(`   üìß Beta signups: ${stats.body.beta.signups}`);
    } else {
      console.log('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // 8. –¢–µ—Å—Ç network status
    console.log('\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º network status...');
    const network = await makeRequest('GET', '/api/network/status');
    if (network.status === 200 && network.body.success) {
      console.log('‚úÖ Network status —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üåê Nodes online: ${network.body.network.nodes_online}`);
      console.log(`   ‚úÖ Success rate: ${network.body.network.success_rate}%`);
      console.log(`   ‚ö° Uptime: ${network.body.network.uptime}`);
    } else {
      console.log('‚ùå Network status –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ –õ–µ–Ω–¥–∏–Ω–≥-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–µ—Ç–∞-–ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç–∞–µ—Ç'); 
    console.log('‚úÖ AI demo —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
    console.log('‚úÖ –í—Å–µ API endpoints –æ—Ç–≤–µ—á–∞—é—Ç');
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–∞');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞');
    
    console.log('\nüöÄ –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–Æ –ù–ê HOSTER.BY!');
    console.log('\nüìã –ß–¢–û –ü–û–õ–£–ß–ò–¢–°–Ø –ü–û–°–õ–ï –î–ï–ü–õ–û–Ø:');
    console.log('üåç –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –Ω–∞ https://neurogrid.network');
    console.log('üìù –†–∞–±–æ—á–∏–π —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–µ—Ç–∞-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ AI demo –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π');
    console.log('üìä –†–µ–∞–ª—Ç–∞–π–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏');
    console.log('üéÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–æ–Ω—É—Å—ã –¥–ª—è early adopters');
    console.log('üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ Product Hunt –∑–∞–ø—É—Å–∫—É');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();