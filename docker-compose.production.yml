# Docker Compose for NeuroGrid Development and Production
version: '3.8'

services:
  # ================================
  # Coordinator Server
  # ================================
  coordinator:
    build:
      context: ./coordinator-server
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: neurogrid-coordinator
    restart: unless-stopped
    ports:
      - "${COORDINATOR_PORT:-3001}:3001"
      - "${METRICS_PORT:-9090}:9090"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - METRICS_PORT=9090
      - DATABASE_URL=postgresql://neurogrid:${POSTGRES_PASSWORD:-neurogrid123}@postgres:5432/neurogrid
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-sk_test_...}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-whsec_...}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
    volumes:
      - coordinator_logs:/app/logs
      - coordinator_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - neurogrid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # Web Interface
  # ================================
  web-interface:
    build:
      context: ./web-interface
      dockerfile: Dockerfile
      target: production
    container_name: neurogrid-web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=http://coordinator:3001/api
      - NEXT_PUBLIC_WS_URL=ws://coordinator:3001/ws
      - NEXT_PUBLIC_STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY:-pk_test_...}
    depends_on:
      - coordinator
    networks:
      - neurogrid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Node Client (Example)
  # ================================
  node-client:
    build:
      context: ./node-client
      dockerfile: Dockerfile
    container_name: neurogrid-node-client
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - COORDINATOR_URL=http://coordinator:3001
      - NODE_ID=${NODE_ID:-node-001}
      - NODE_TYPE=${NODE_TYPE:-gpu}
      - GPU_ENABLED=${GPU_ENABLED:-false}
    depends_on:
      - coordinator
    networks:
      - neurogrid-network
    # Uncomment for GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: neurogrid-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=neurogrid
      - POSTGRES_USER=neurogrid
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-neurogrid123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - neurogrid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neurogrid -d neurogrid"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: neurogrid-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - neurogrid-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300

  # ================================
  # Prometheus Monitoring
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: neurogrid-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - neurogrid-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # ================================
  # Grafana Dashboard
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: neurogrid-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - neurogrid-network
    depends_on:
      - prometheus

  # ================================
  # Nginx Load Balancer
  # ================================
  nginx:
    image: nginx:alpine
    container_name: neurogrid-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - neurogrid-network
    depends_on:
      - coordinator
      - web-interface

  # ================================
  # Log Aggregation (Optional)
  # ================================
  fluentd:
    build:
      context: ./logging
      dockerfile: Dockerfile.fluentd
    container_name: neurogrid-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/var/log
    networks:
      - neurogrid-network

# ================================
# Networks
# ================================
networks:
  neurogrid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  coordinator_logs:
    driver: local
  coordinator_uploads:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local