version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: neurogrid-postgres
    environment:
      POSTGRES_DB: neurogrid
      POSTGRES_USER: neurogrid
      POSTGRES_PASSWORD: neurogrid_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./coordinator-server/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - neurogrid-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neurogrid -d neurogrid"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: neurogrid-redis
    command: redis-server --appendonly yes --requirepass neurogrid_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - neurogrid-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Coordinator Server
  coordinator-server:
    build:
      context: ./coordinator-server
      dockerfile: Dockerfile
    container_name: neurogrid-coordinator
    environment:
      NODE_ENV: development
      PORT: 3001
      POSTGRES_URL: postgresql://neurogrid:neurogrid_password@postgres:5432/neurogrid
      REDIS_URL: redis://:neurogrid_redis_password@redis:6379
      JWT_SECRET: neurogrid-jwt-secret-key-change-in-production
      API_RATE_LIMIT: 1000
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
    ports:
      - "3001:3001"
    networks:
      - neurogrid-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./coordinator-server/logs:/app/logs
      - ./coordinator-server/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web Interface
  web-interface:
    build:
      context: ./web-interface
      dockerfile: Dockerfile
    container_name: neurogrid-web
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001/ws
      NEXT_PUBLIC_ENABLE_ANALYTICS: "true"
      NEXT_PUBLIC_ENABLE_MONITORING: "true"
    ports:
      - "3000:3000"
    networks:
      - neurogrid-network
    depends_on:
      coordinator-server:
        condition: service_healthy
    restart: unless-stopped

  # Node Client (Example - for testing)
  node-client:
    build:
      context: ./node-client
      dockerfile: Dockerfile
    container_name: neurogrid-node-client
    environment:
      NEUROGRID_COORDINATOR_URL: http://coordinator-server:3001
      NEUROGRID_NODE_TOKEN: test-node-token-123
      NEUROGRID_MAX_VRAM_GB: 4
      NEUROGRID_MAX_CPU_CORES: 2
      NEUROGRID_LOG_LEVEL: INFO
      NEUROGRID_ENABLE_DOCKER: "false"  # Disabled in container
    volumes:
      - ./node-client/data:/app/data
      - ./node-client/logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker if needed
    networks:
      - neurogrid-network
    depends_on:
      coordinator-server:
        condition: service_healthy
    restart: unless-stopped
    # Note: This is mainly for testing. Real nodes run on separate machines.

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: neurogrid-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - neurogrid-network
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: neurogrid-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3002:3000"
    networks:
      - neurogrid-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # MinIO (Object Storage for Models)
  minio:
    image: minio/minio:latest
    container_name: neurogrid-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: neurogrid
      MINIO_ROOT_PASSWORD: neurogrid_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - neurogrid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Nginx (Reverse Proxy & Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: neurogrid-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - neurogrid-network
    depends_on:
      - coordinator-server
      - web-interface
    restart: unless-stopped

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

# Custom network for service communication
networks:
  neurogrid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16